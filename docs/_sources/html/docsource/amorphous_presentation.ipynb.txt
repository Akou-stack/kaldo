{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "HFoatzweSuTT"
   },
   "source": [
    "\n",
    "Open the notebook in Colab https://github.com/gbarbalinardo/kaldo/blob/master/docs/amorphous_presentation.ipynb\n",
    "\n",
    "<a href=\"https://github.com/gbarbalinardo/kaldo/blob/master/docs/amorphous_presentation.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "RDmLrYaYyjjf"
   },
   "source": [
    "# Tutorial: Thermal Transport Simulation for Silicon Amorphous\n",
    "Run the code cell below to install kaldo. Replace username and password."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YmTI_xUXyxPn"
   },
   "outputs": [],
   "source": [
    "!pip install git+https://<USERNAME>:<PASSWORD>@github.com/gbarbalinardo/kaldo.git"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "W3jVRdQg1US_"
   },
   "source": [
    "## Remote Fetch Necessary Files\n",
    "Run the code cell below to fetch kaldo/forceconstant repos,geometry (in xyz) and forefield files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n4PN3gLv08-r"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "if not os.path.exists('dlpoly-216.zip'):\n",
    "  !wget http://chemac196.ucdavis.edu/data-html/dlpoly-216.tar.gz\n",
    "  !tar -xzf dlpoly-216.tar.gz\n",
    "  !rm dlpoly-216.tar.gz\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "FlzbvmDEACjK"
   },
   "source": [
    "\n",
    "## Import the needed dependencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "r4DQJ9R8_LSs"
   },
   "outputs": [],
   "source": [
    "from kaldo import ForceConstant\n",
    "from kaldo.phonons import Phonons\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import ase.units as units\n",
    "plt.style.use('seaborn-poster')\n",
    "\n",
    "# if you want to run it as script\n",
    "# import sys\n",
    "# temperature = float(sys.argv[1])\n",
    "# is_classic = int(sys.argv[2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CEwFwIu22sTr"
   },
   "source": [
    "## Create the `ForceConstant` object importing it from the Davide/Charlie format\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "klqZU5kL2r03"
   },
   "outputs": [],
   "source": [
    "forceconstants = ForceConstant.import_from_dlpoly_folder('dlpoly-216')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "QN_vsCka214j"
   },
   "source": [
    "## Create the `Phonons` object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "s5CqRV1_21dS"
   },
   "outputs": [],
   "source": [
    "\n",
    "# # Create a phonon object\n",
    "phonons = Phonons (forceconstants=forceconstants,\n",
    "                   is_classic=1,\n",
    "                   temperature=300,\n",
    "                   folder='si-amorphous',\n",
    "                   third_bandwidth=0.05/4.135,\n",
    "                   broadening_shape='triangle')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "QJrSANGH2UE7"
   },
   "source": [
    "## Plot the inverse of the lifetime, $\\Gamma$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "paZ-0PdV2LQE"
   },
   "outputs": [],
   "source": [
    "\n",
    "frequencies = phonons.frequencies.flatten()\n",
    "gamma_classic = phonons.gamma.flatten()\n",
    "plt.plot(frequencies[3:], gamma_classic[3:], 'b.', markersize=10)\n",
    "plt.ylabel('$\\Gamma$ (THz)', fontsize=25, fontweight='bold')\n",
    "plt.xlabel(\"$\\\\nu$ (Thz)\", fontsize=25, fontweight='bold')\n",
    "plt.ylim([gamma_classic.min(), 6])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Z5Oi9Z1i2OPf"
   },
   "source": [
    "## Plot phase space"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "jXNDQFsn2NvA"
   },
   "outputs": [],
   "source": [
    "\n",
    "ps_classic = phonons.ps.flatten()\n",
    "plt.plot(frequencies[3:], ps_classic[3:], 'b.', markersize=10)\n",
    "plt.ylabel('$\\Gamma$ (THz)', fontsize=25, fontweight='bold')\n",
    "plt.xlabel(\"$\\\\nu$ (Thz)\", fontsize=25, fontweight='bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jt0EwrvZ5AVh"
   },
   "source": [
    "## Conductivity Quasi-Harmonic-Green-Kubo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "2iEoR8ZV5HW6"
   },
   "outputs": [],
   "source": [
    "\n",
    "print('QHGK conductivity')\n",
    "cond = phonons.conductivity(method='qhgk').sum(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "VHEJcuV_0cHG"
   },
   "outputs": [],
   "source": [
    "# Create a finite difference object\n",
    "forceconstants = ForceConstant.import_from_dlpoly_folder('dlpoly-216')\n",
    "# '\n",
    "# # Create a phonon object\n",
    "temperatures = [5, 10, 15, 20, 35, 50, 75, 100, 150, 200, 300, 500, 1000]\n",
    "for third_bandwidth in [0.5, 1, 2, 4]:\n",
    "    conds = []\n",
    "    for temperature in temperatures:\n",
    "        phonons = Phonons (forceconstants=forceconstants,\n",
    "                   is_classic=0,\n",
    "                   temperature=temperature,\n",
    "                   folder='si-amorphous',\n",
    "                   third_bandwidth=third_bandwidth/4.135,\n",
    "                   broadening_shape='triangle')\n",
    "\n",
    "\n",
    "        print('AF conductivity')\n",
    "        cond = (phonons.conductivity(method='qhgk', third_bandwidth=third_bandwidth/4.135).sum(axis=0))\n",
    "        conds.append(cond.diagonal().mean())\n",
    "    plt.plot(temperatures, conds, label='$\\delta_{in}$='+str(np.round(third_bandwidth/4.135,2))+' THz')\n",
    "    \n",
    "plt.ylabel('$\\kappa$ (W/m/K)', fontsize=25, fontweight='bold')\n",
    "plt.xlabel(\"$Temperature$ (K)\", fontsize=25, fontweight='bold')\n",
    "plt.legend(prop={'size': 20})\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "9jGCNRng6Urj"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "amorphous_presentation.ipynb",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}

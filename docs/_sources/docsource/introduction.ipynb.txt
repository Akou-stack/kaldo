{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   },
   "source": [
    "### Quick Install\n",
    "\n",
    "We recommend creating a new environment with Python 3.7.\n",
    "```bash\n",
    "conda create -n kaldo python=3.7\n",
    "```\n",
    "and enable the environment\n",
    "```bash\n",
    "conda activate kaldo\n",
    "```\n",
    "\n",
    "Alternatively you can use Python 3.6. The Tensorflow module doesn't seem to be compatible with Python 3.8, yet.\n",
    "\n",
    "kALDo installation can be done using `pip`\n",
    "```bash\n",
    "pip install git+https://github.com/nanotheorygroup/kaldo\n",
    "```\n",
    "\n",
    "#### Using `pip` and `virtualenv`\n",
    "\n",
    "You can also install kALDO without using `conda`\n",
    "```bash\n",
    "pip3 install virtualenv\n",
    "virtualenv --system-site-packages -p python3 ~/kaldo\n",
    "source ~/kaldo/bin/activate\n",
    "pip3 install git+https://github.com/nanotheorygroup/kaldo\n",
    "```\n",
    "#### Development mode\n",
    "\n",
    "The best way to run examples, tests and to develop kaldo is to follow the quick install procedure, and add the following extra steps.\n",
    "```bash\n",
    "pip uninstall kaldo\n",
    "make ~/develoment\n",
    "cd ~/development\n",
    "git clone git+https://github.com/nanotheorygroup/kaldo\n",
    "export PYTHONPATH=~/development/kaldo:$PYTHONPATH\n",
    "```\n",
    "If you followed the steps in the quickstart and then uninstall kaldo, you will have all the dependencies correctly installed.\n",
    "The next lines are pulling the repo from Github and adding it to the `PYTHONPATH`.\n",
    "\n",
    "If you want to make the last change in the `PYTHONPATH` permanent, you can also run\n",
    "```bash\n",
    "echo \"export PYTHONPATH=~/development/kaldo:$PYTHONPATH\" >> ~/.bashrc\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "### Interfacing with Other Codes\n",
    " \n",
    "#### LAMMPS setup\n",
    "\n",
    "In order to use LAMMPS with ASE, it needs to be compiled a lib\n",
    "```bash\n",
    "cd path/to/lammps/src\n",
    "make yes-manybody\n",
    "make yes-molecule\n",
    "...\n",
    "make mpi mode=shlib\n",
    "```\n",
    "Next, activate your environment\n",
    "```\n",
    "conda activate kaldo\n",
    "```\n",
    "or if you used `virtualenv`\n",
    "```\n",
    "source ~/kaldo/bin/activate\n",
    "```\n",
    "and finally install `lammpslib` using\n",
    "```\n",
    "make install-python\n",
    "```\n",
    "Update July 2020: It looks like `lammpslib` has some issue in the July 2020 version of LAMMPS. \n",
    "If you are having issues with it, try using the September 2019 version.\n",
    "\n",
    "#### Quantum Espresso setup\n",
    "\n",
    "In order to use QE with ASE, Set the environment variable:\n",
    "```bash\n",
    "export ASE_ESPRESSO_COMMAND=\"mpirun -np 4 /path/to/pw.x -in PREFIX.pwi > PREFIX.pwo\"\n",
    "```\n",
    "\n",
    "See the [ASE documentation](https://wiki.fysik.dtu.dk/ase/ase/calculators/calculators.html) for more info.\n",
    "\n",
    "### Output Storage\n",
    "\n",
    "#### Default Storage\n",
    "\n",
    "When using the storage `formatted`, kALDo stores the following dense tensor as formatted, human readable, files:\n",
    "- `frequency` $(n_{kpoints}, n_{modes})$. mode changes first k changes after\n",
    "- `velocity_alpha` $(n_{kpoints}, n_{modes})$\n",
    "- `physical_mode_<min_freq>_<max_freq>_<is_nw>` $(n_{kpoints}, n_{modes})$\n",
    "\n",
    "- `<temperature>/<statistics>/heat_capacity` $(n_{kpoints}, n_{modes})$\n",
    "- `<temperature>/<statistics>/population` $(n_{kpoints}, n_{modes})$\n",
    "\n",
    "- `<temperature>/<statistics>/<method>/<third_bandwidth>/<diffusivity_bandwidth>/conductivity_<alpha>_<beta>` $(n_{kpoints}, n_{modes})$ where the `<third_bandwidth>/<diffusivity_bandwidth>` folder is created only if those values are defined\n",
    "- `<temperature>/<statistics>/<diffusivity_bandwidth>/diffusivity` $(n_{kpoints}, n_{modes})$\n",
    "- `<temperature>/<statistics>/<third_bandwidth>/<method>/mean_free_path` $(n_{kpoints}, n_{modes})$\n",
    "- `<temperature>/<statistics>/<third_bandwidth>/lifetime` $(n_{kpoints}, n_{modes})$\n",
    "- `<temperature>/<statistics>/<third_bandwidth>/bandwidth` $(n_{kpoints}, n_{modes})$\n",
    "- `<temperature>/<statistics>/<third_bandwidth>/phase_space` $(n_{kpoints}, n_{modes})$\n",
    "- `<diffusivity_bandwidth>flux_dense` $(n_{kpoints}, n_{modes}, n_{kpoints}, n_{modes})$, when `diffusivity_threshold` is not specified.\n",
    "- `<diffusivity_bandwidth>/<diffusivity_threshold>/flux_sparse` $(n_{kpoints}, n_{modes}, n_{kpoints}, n_{modes})$. Sparse only when  `diffusivity_threshold` is specified.\n",
    "\n",
    "\n",
    "The folder structure depends on the input parameters to the Phonon Object\n",
    "and in parenthesis is the shape of the tensor. All of the above observables are stored in a dense format, \n",
    "except for `flux_alpha` which is stored as formatted file in a `index value` format.\n",
    "\n",
    "The following tensors are stored in raw binary format and help saving time when performing different simulations on the same sample.\n",
    "- `_eigensystem (eigenvalues and eigenvectors)`\n",
    "- `_dynmat_derivatives`\n",
    "- `<temperature>/<statistics>/<diffusivity_bandwidth>/_generalized_diffusivity` \n",
    "- `<temperature>/<statistics>/<third_bandwidth>/_ps_and_gamma_tensor`\n",
    "- `<temperature>/<statistics>/<third_bandwidth>/_ps_and_gamma`, when only RTA conductivity is required\n",
    "\n",
    "#### Alternative Storage\n",
    "\n",
    "Other storage options available are `numpy` and `hdf5` where all the files are saved as one of those formats.\n",
    "Finally the `memory` option doesn't store any permanent files.\n",
    "\n",
    "| Measurement            | Units                    |\n",
    "|------------------------|--------------------------|\n",
    "| Potential Derivatives  | $eV/(A^2)$ or $eV/(A^3)$ |\n",
    "| Dynamical Matrix       | $THz$                    |\n",
    "| Conductivity [$\\kappa$]| $\\frac{W}{m\\ K}$         |\n",
    "| Distances              | $A$                      |\n",
    "| Masses                 | $g/N_A$                  |\n",
    "\n",
    "\n",
    "\n",
    "### Code Architecture\n",
    "\n",
    "<img src=\"_resources/class_diagram.png\" width=\"650\">\n",
    "\n",
    "\n",
    "### Main Features\n",
    "\n",
    "Below we illustrate the main features of the code\n",
    "\n",
    "<img src=\"_resources/features.png\" width=\"650\">\n",
    "\n",
    "\n",
    "### Copyright\n",
    "\n",
    "Copyright (c) 2020, Giuseppe Barbalinardo, Zekun Chen, Nicholas W. Lundgren, Davide Donadio\n",
    "\n",
    "### Acknowledgements\n",
    "\n",
    "<img src=\"_resources/funding.png\" width=\"650\">\n",
    "\n",
    "We gratefully acknowledge support by the Investment Software Fellowships (grant No. ACI-1547580-479590) of the NSF Molecular Sciences Software Institute (grant No. ACI-1547580) at Virginia Tech. \n",
    "\n",
    "MolSSI builds open source software and data which serves the computational molecular science community. [Explore MolSSI’s software infrastructure projects.](https://molssi.org/software-projects/)\n",
    "\n",
    "### Other codes\n",
    "\n",
    "We are thankful to the whole open-source community, and in particular we want to acknowledge some other great anharmonic lattice dynamics related projects. If using kALDo example, you \n",
    "If, while you are running kALDo examples, you use any of these codes, please don't forget to cite them. \n",
    "\n",
    "- ASE: A. H. Larsen, J. J. Mortensen, J. Blomqvist, I. E. Castelli, R. Christensen, M. Dułak, J. Friis, M. N. Groves, B. Hammer, C. Hargus, E. D. Hermes, P. C. Jennings, P. B. Jensen, J. Kermode, J. R. Kitchin, E. L. Kolsbjerg, J. Kubal, K. Kaasbjerg, S. Lysgaard, J. B. Maronsson, T. Maxson, T. Olsen, L. Pastewka, A. Peterson, C. Rostgaard, J. Schiøtz, O. Schütt, M. Strange, K. S. Thygesen, T. Vegge, L. Vilhelmsen, M. Walter, Z. Zeng, and K. W. Jacobsen, “The atomic simulation environment—a python library for work- ing with atoms,” Journal of Physics: Condensed Matter 29, 273002 (2017).\n",
    "- LAMMPS: S. Plimpton, Fast Parallel Algorithms for Short-Range Molecular Dynamics, J Comp Phys, 117, 1-19 (1995).\n",
    "- Quantum Espresso: P Giannozzi, O Andreussi, T Brumme, O Bunau, M Buongiorno Nardelli, M Calandra, R Car, C Cavazzoni, D Ceresoli, M Cococcioni, N Colonna, I Carnimeo, A Dal Corso, S de Gironcoli, P Delugas, R A DiStasio Jr, A Ferretti, A Floris, G Fratesi, G Fugallo, R Gebauer, U Gerstmann, F Giustino, T Gorni, J Jia, M Kawamura, H-Y Ko, A Kokalj, E Küçükbenli, M Lazzeri, M Marsili, N Marzari, F Mauri, N L Nguyen, H-V Nguyen, A Otero-de-la-Roza, L Paulatto, S Poncé, D Rocca, R Sabatini, B Santra, M Schlipf, A P Seitsonen, A Smogunov, I Timrov, T Thonhauser, P Umari, N Vast, X Wu and S Baroni, J.Phys.:Condens.Matter 29, 465901 (2017)\n",
    "- HiPhive: The Hiphive Package for the Extraction of High‐Order Force Constants by Machine Learning, Fredrik Eriksson, Erik Fransson, and Paul Erhart, Advanced Theory and Simulations,  (2019)\n",
    "\n",
    "### Project template\n",
    "\n",
    "Project template from the [Computational Molecular Science Python Cookiecutter](https://github.com/molssi/cookiecutter-cms)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  },
  "pycharm": {
   "stem_cell": {
    "cell_type": "raw",
    "source": [],
    "metadata": {
     "collapsed": false
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}